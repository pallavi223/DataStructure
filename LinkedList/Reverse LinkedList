Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Approach 1 -- Using iterative -> T(C)=O(N) , S(C) = O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
//if list is empty or has only one element
   if(head == NULL || head->next == NULL){
       return head;
   }
    ListNode* prev = NULL;
    ListNode* curr = head;
    ListNode* forward = NULL;
    while(curr != NULL){
        forward = curr->next;
        curr->next = prev;
        prev = curr;
        curr = forward;         
    }
    return prev;
        
    }
    
    ############################ 2. Using Recursion ####################333
    class Solution {

    void solve(ListNode* &head,ListNode* &curr,ListNode* &prev){
        
        //base case
        if(curr == NULL){
            head = prev;
            return;
        }
        ListNode* forward = curr->next;
        solve(head,forward,curr);
        curr->next = prev;
    }
    
public:
    ListNode* reverseList(ListNode* head) {

    ListNode* curr = head;
    ListNode* prev = NULL;
    solve(head,curr,prev);
    
      return head;  
    }
};
};
