Node* merge(Node* down, Node* right){
   if(down == NULL)
       return right;
    if(right == NULL)
        return down;
    
    Node* ans = NULL;
   
        if(down->data < right->data){
            ans = down;
            ans->child = merge(down->child, right);
        }
        else{
            ans = right;
            ans->child = merge(down,right->child);
        }
    
    ans->next = NULL;
    return ans;
  
}
Node* flattenLinkedList(Node* head) 
{
    if(head == NULL || head->next == NULL){
        return head;
    }
    //recursive call
    return merge(head, flattenLinkedList(head->next));

}

2. Approach two 

//bottom pointer here like next pointer
Node* merge(Node* first, Node* second){
    if(first == NULL)
    return second;
    if(second == NULL)
    return first;
    
    //creat dummy node
    Node* temp = new Node(-1);
    Node* ans = temp;
    
    while(first != NULL && second != NULL){
    if(first->data < second->data){
       temp->bottom = first;
       first = first->bottom;
    }else{
        
        temp->bottom = second;
        second = second->bottom;
    }
    temp = temp->bottom;
    }
    
    if(first != NULL){
        temp->bottom = first;
    }
    else{
        temp->bottom = second;
    }
    ans = ans->bottom;
    return ans;
}

Node *flatten(Node *root)
{
   if(root == NULL || root->next == NULL){
       return root;
   }
   //recursion call
   root->next = flatten(root->next);
   root = merge(root, root->next);
   return root;
}

