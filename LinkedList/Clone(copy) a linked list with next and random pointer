


1. Approach   - with extra space TC - O(N), SC = O(N)
class Solution {
private:
    void insertAtTail(Node* &head, Node* &tail, int val){
        Node* newNode = new Node(val);
        if(head == NULL){
            head = newNode;
            tail = newNode;
            return;
        }
      else{
          tail->next = newNode;
          tail = newNode;
      }
    }
public:
    Node* copyRandomList(Node* head) {
        //step1: create a clone of original LList
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        Node* temp = head;
        while(temp != NULL){
            insertAtTail(cloneHead, cloneTail, temp->val);
            temp = temp->next;
        }
        //create map for mapping original list to clone list
        unordered_map<Node* , Node*> oldToNewNode;
        Node* originalNode = head;
        Node* cloneNode = cloneHead;
        while(originalNode != NULL){

            oldToNewNode[originalNode] = cloneNode;
            originalNode = originalNode->next;
            cloneNode = cloneNode ->next;
        }
        //update pointers
        originalNode = head;
        cloneNode = cloneHead;
        while(originalNode != NULL){
            //map cloneNode random to originalNode ka random se
            cloneNode->random = oldToNewNode[originalNode->random];
            originalNode = originalNode->next;
            cloneNode = cloneNode->next;
        }
      return cloneHead;

    }
};
