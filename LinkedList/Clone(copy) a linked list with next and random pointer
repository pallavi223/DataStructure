


1. Approach   - with extra space TC - O(N), SC = O(N)
class Solution {
private:
    void insertAtTail(Node* &head, Node* &tail, int val){
        Node* newNode = new Node(val);
        if(head == NULL){
            head = newNode;
            tail = newNode;
            return;
        }
      else{
          tail->next = newNode;
          tail = newNode;
      }
    }
public:
    Node* copyRandomList(Node* head) {
        //step1: create a clone of original LList
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        Node* temp = head;
        while(temp != NULL){
            insertAtTail(cloneHead, cloneTail, temp->val);
            temp = temp->next;
        }
        //create map for mapping original list to clone list
        unordered_map<Node* , Node*> oldToNewNode;
        Node* originalNode = head;
        Node* cloneNode = cloneHead;
        while(originalNode != NULL){

            oldToNewNode[originalNode] = cloneNode;
            originalNode = originalNode->next;
            cloneNode = cloneNode ->next;
        }
        //update pointers
        originalNode = head;
        cloneNode = cloneHead;
        while(originalNode != NULL){
            //map cloneNode random to originalNode ka random se
            cloneNode->random = oldToNewNode[originalNode->random];
            originalNode = originalNode->next;
            cloneNode = cloneNode->next;
        }
      return cloneHead;

    }
};

2. approach without any extra space O(N) S(1)

    private:
    void insertAtTail(Node* &head, Node* &tail, int data){
        Node* newNode = new Node(data);
        if(head == NULL){
            head = newNode;
            tail = newNode;
            return;
        }
        else{
            tail->next = newNode;
            tail = newNode;
        }
        
    }
    public:
    Node *copyList(Node *head)
    {
        //step1: create a clone of list
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        
        Node* temp = head;
        while(temp != NULL){
            insertAtTail(cloneHead, cloneTail, temp->data);
            temp = temp->next;
        }
        
        //step 2 - add nodes between originalNode
        Node* originalNode = head;
        Node* cloneNode = cloneHead;
        while(originalNode != NULL && cloneNode != NULL){
            Node* next = originalNode->next;
            originalNode->next = cloneNode;
            originalNode = next;
            
            next = cloneNode->next;
            cloneNode->next = originalNode;
            cloneNode = next;
            
        }
        
        //step3: copy random pointer in clone list
         temp = head;
        while(temp != NULL){
            if(temp->next != NULL){
                temp->next->arb=temp->arb ? temp->arb->next : temp->arb;
                //or
                // if(temp->arb != NULL){
                //   temp->next->arb = temp->arb->next;
                // }
                // else{
                //     temp->next = temp->arb;
                // }
                
            }
            temp = temp->next->next;
          
        }
        
        //step4: revert changes done in step2
        originalNode = head;
        cloneNode = cloneHead;
         while(originalNode != NULL && cloneNode != NULL){
             originalNode->next = cloneNode->next;
             originalNode = originalNode->next;
             
             if(originalNode != NULL){
             cloneNode->next = originalNode->next;
             } 
             cloneNode = cloneNode->next;
         }
         //step5: return ans
         return cloneHead;
    }

