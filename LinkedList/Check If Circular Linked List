
Check If Circular Linked List


Approach 1:
bool isCircular(Node *head)
{
   // Your code here
   if(head == NULL){
       return true;
   }
   
   Node* temp = head->next;
   while(temp!= NULL && temp != head){
       temp = temp->next;
   }
   if(temp == head){
       return true;
   }
   return false;
}


Approach 2. Using map(extra space)

// C++ program to detect loop in
// given linked list using map
#include <bits/stdc++.h>
using namespace std;

// Structure for a node in Linked List
struct Node {
	int data;
	Node* next;
};

// Function to create Linked List
// Node
Node* newNode(int d)
{
	Node* temp = new Node;
	temp->data = d;
	temp->next = NULL;
	return temp;
}

// Declaration of Map to keep
// mark of visited Node
map<Node*, bool> vis;
bool flag = 0;

// Function to check cycle in Linked
// List
void check(Node* head)
{
	// If head is NULL return ;
	if (head == NULL) {
		flag = 0;
		return;
	}

	// Mark the incoming Node as
	// visited if it is not visited yet
	if (!vis[head]) {
		vis[head] = true;
		check(head->next);
	}

	// If a visited Node is found
	// Update the flag value to 1
	// and return ;
	else {
		flag = 1;
		return;
	}
}

// Driver Code
int main()
{
	// Create a head Node
	Node* head = newNode(20);

	// Inserting Node in Linked List
	head->next = newNode(4);
	head->next->next = newNode(5);
	head->next->next->next = newNode(10);

	// Just to make a cycle
	head->next->next->next->next = head;

	// Function that detect cycle in
	// Linked List
	check(head);

	// If flag is true, loop is found
	if (flag)
		cout << "Loop detected.";

	// If flag is false, No Loop
	// detected
	else
		cout << "No Loop Found.";
	cout << endl;

	return 0;
}
