
Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6


vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K) {
                                                 
  //Sliding window approcah                                               
                                                 
 vector<long long> res;
  deque<long long> ans;
 int i=0;
 int j=0;
 while(j < N){
     //calculation
     if(A[j] < 0){
         ans.push_back(A[j]);
     }
     
     if(j-i+1 < K){
         j++;
     }
     else if(j-i+1 == K)
     {
         //ans-calculation
         if(ans.size() == 0){
             //vector array is empty
             res.push_back(0);
         }
         else{
             res.push_back(ans.front());
             if(A[i] == ans.front()){
                 ans.pop_front();
                 
             }
         }
             i++;
             j++;
         
     }

 }
 return res;                                               
                                                 
 }
 
 
 
 
 
 #######################################################
 vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K) {
         
         deque<long long int>dq;
         vector<long long> ans;
         
         //process first window of k size
         for(int i=0;i<K;i++){
             if(A[i] < 0){    //if -ve ele
                 dq.push_back(i);
             }
         }
          
          //store ans of k - sized window
         if(dq.size() > 0){
             ans.push_back(A[dq.front()]);
         }
         else{
             ans.push_back(0);
         }
                 
         //process for remaining windows
         for(int i=K; i<N; i++){
             //removal
             if(!dq.empty() && i-dq.front() >= K){
                 dq.pop_front();
             }
             //addition of current element
             if(A[i] < 0){   //-ve no
                dq.push_back(i); 
             }
             
             //store ans
            if(dq.size() > 0){
                ans.push_back(A[dq.front()]);
            }
            else{
                 ans.push_back(0);
            }
             
         }
         return ans;
                                                 
 }
