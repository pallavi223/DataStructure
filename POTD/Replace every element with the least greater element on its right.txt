
arr[] = {2, 6, 9, 1, 3, 2}
Output: {3, 9, -1, 2, -1, -1}
Explanation: 
The least next greater element of 2 is 3. 
The least next greater element of 6 is 9.
least next greater element for 9 does not
exist and so on.



##################
Brute Force - O(N2)
    vector<int> findLeastGreater(vector<int>& arr, int n) {
      int mini = INT_MAX;
      vector<int> ans(n);
        for(int i=0;i<n;i++){
            int curr = arr[i];
            for(int j=i+1;j<n;j++){
                
                if(arr[j] > curr)
                    mini = min(mini, arr[j]);
                    
                }
                
                if(mini = INT_MAX )
                  ans[i] = -1;
                else
                   ans[i] = mini;
            
        }
        
        return ans;
    }
    
    
    ############################## T(C) = O(nlog n) , S(C) = O(N) 
    1.   Using  Upper Bound () --> returns nearest greater element 
    
    
        vector<int> findLeastGreater(vector<int>& arr, int n) {     
        
        vector<int> ans(n);
        set<int> s;  //store element sorted order
        
        //piche se islye kyki agr age s chlnge to compelxity badh jygi
        for(int i=n-1; i>=0; i--){
            
            if(s.size() == 0){
                ans[i] = -1;
            }
            else if(s.size()>0){
                
                //find upper bound of ele
                auto it = s.upper_bound(arr[i]);
                
                //check if upper bound milgya to vo return kro 
                //vrna end tak puch gya or ni mila to -1 return kro
                
                if(it != s.end()){
                    ans[i] = *it;
                }
                else
                   ans[i] = -1;
                
            }
            //insert another ele in set
            s.insert(arr[i]);
          
        }
        return ans;
    }
