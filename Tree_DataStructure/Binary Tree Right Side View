Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]


################## Recursive sol 

class Solution {
    void solve(TreeNode* root, int level, vector<int> &res){
        if(root == NULL){
            return;
        }

        if(res.size() == level) {
            res.push_back(root->val);
        }
        solve(root->right, level+1, res);
        solve(root->left , level+1, res);
    }
public:
//use reverse of pre order traversal - right left root
    vector<int> rightSideView(TreeNode* root) {
          vector<int> res;
          solve(root, 0, res);
          return res;
    }
};


####################### Iterative sol
  vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
        if(root == NULL){
            return res;
        }
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
           int size = q.size();

           for(int i=0;i<size;i++){
               TreeNode* temp = q.front();
               q.pop();
               if(i==size-1){   
                   res.push_back(temp->val);
               }
               if(temp->left){
                   q.push(temp->left);
               }
               if(temp->right){
                   q.push(temp->right);
               }
           }
          
        }
        return res;
    }
