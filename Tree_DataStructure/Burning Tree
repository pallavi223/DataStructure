Given a binary tree and a node called target. Find the minimum time required to burn the complete binary tree if the target is set on fire.
It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.


    Node* createParentMapping(Node* root, int target, map<Node*, Node*> &nodeToParent)
    {
        //create mapping
          // mapping for node to its parent
        //as for every node ,its left chil ,right child and its parent will burn
        //we can access left and right. but for parent we need mapping
        
        queue<Node*>q;
        q.push(root);
        nodeToParent[root]=NULL;
        Node* res = NULL;
        while(!q.empty()){
            Node*front = q.front();
            q.pop();
            
            if(front->data==target)res = front;
            
            if(front->left){
                // as left child  parent will be front
                nodeToParent[front->left]=front;
                q.push(front->left);
            }
            if(front->right){
                nodeToParent[front->right]=front;
                q.push(front->right);
            }
        }
        
        return res;
        
    }
   
   int burnTree(Node* root, map<Node*, Node*> &nodeToParent){
         //creating a map to check if that node is already visited or not
        map<Node*,bool> visited;
        visited[root]=true;
        
        //time to burn tree.
        int ans = 0;
        
        //queue for traversal
        queue<Node*>q;
        q.push(root);
        
        //Level Order Traversal
        while(!q.empty())
        {
            
            bool flag = 0;
            int size = q.size();
            
            for(int i=0;i<size;i++)
            {
            Node*front = q.front();
            q.pop();
            
            if(front->left && !visited[front->left]){
                flag=1;
                q.push(front->left);
                visited[front->left]=1;
               }
            
            if(front->right && !visited[front->right]){
                flag=1;
                q.push(front->right);
                visited[front->right]=1;
                }
            
            if(nodeToParent[front] && !visited[nodeToParent[front]]){
                flag=1;
                  q.push(nodeToParent[front]);
                visited[nodeToParent[front]]=1;
                }
            }
            
            if(flag==1)
                ans++;
        }
        
        return ans;
    
   }


  public:
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        map<Node*, Node*> nodeToParent;
        Node* targetNode = createParentMapping(root, target, nodeToParent);
        int ans = burnTree(targetNode, nodeToParent);
        return ans;
    }
};
