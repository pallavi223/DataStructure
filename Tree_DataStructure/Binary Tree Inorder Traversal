Input: root = [1,null,2,3]
Output: [1,3,2]



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    void solve(TreeNode* root, vector<int> &ans){
        //base cond
        if(root == NULL){
            return;
        }

        //recursion call for left traverse
        if(root->left){
        solve(root->left, ans);
        }
        //print root k data
        ans.push_back(root->val);
        if(root->right){
        //right recursion call
        solve(root->right,ans);
        }
    }
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        solve(root, ans);
        return ans;
    }
};

########################## Interative sol
   vector<int> inOrder(Node* root) {
        vector<int> inorder;
        stack<Node*> st;
        Node* node = root;
        
        while(true){
            if(node != NULL){
                st.push(node);
                node = node->left;
            }
            else{
                if(st.empty() == true){
                    break;
                }
                node = st.top();
                st.pop();
                inorder.push_back(node->data);
                node = node->right;
                }
        }
        return inorder;
    }
