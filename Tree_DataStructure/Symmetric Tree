Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
Input: root = [1,2,2,3,4,4,3]
Output: true




class Solution {

    bool isSymmetricHelper(TreeNode *left, TreeNode *right){
        if(left == NULL || right == NULL){
            return left==right;
        }
        if(left -> val != right -> val){
            return false;
        }
        bool a = isSymmetricHelper(left->left, right->right);
        bool b = isSymmetricHelper(left->right, right->left);

        if(a == true && b == true)
            return true;
        
        else
        return false;
    }
public:
    bool isSymmetric(TreeNode* root) {
        if(root == NULL){
            return true;
        }
        return isSymmetricHelper(root->left, root->right);
    }
};
