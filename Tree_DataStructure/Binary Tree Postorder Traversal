
Input: root = [1,null,2,3]
Output: [3,2,1]


class Solution {
    private:
    void solve(TreeNode* root, vector<int> &ans){
     //base cond
     if(root == NULL){
         return;
     }

     if(root->left){
      solve(root->left, ans);
     }
     if(root->right){
     solve(root->right, ans);
     }
     ans.push_back(root->val);
    }
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        solve(root,ans);
        return ans;
    }
};



################################ Post order traversal (iterative sol)
//Function to return a list containing the postorder traversal of the tree.
vector <int> postOrder(Node* root)
{
      vector<int> postorder;
    if(root == NULL){
        return postorder;
    }

  stack<Node*> st;
  Node* curr = root;
  
  while(curr != NULL || !st.empty()){
      if(curr != NULL){
          st.push(curr);
          curr = curr->left;
          }
        else{
            Node* temp = st.top() -> right;
            if(temp == NULL){
                temp = st.top();
                st.pop();
                postorder.push_back(temp->data);
            
            while(!st.empty() && temp == st.top()->right){
                temp = st.top();
                st.pop();
                postorder.push_back(temp->data);
            }
        }
        else{
           curr = temp; 
        }
  }
  
}
 return postorder;
}
