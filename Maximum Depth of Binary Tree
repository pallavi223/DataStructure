Input: root = [3,9,20,null,null,15,7]
Output: 3

T(C) - O(N)    S(C)  - O(N)
class Solution {
public:
    int maxDepth(TreeNode* root) {
        //Using recursion
       //base condition
       if(root == NULL){
           return 0;
       }   
       
       //recursive call to traverse left & right side of tree
       int lh = maxDepth(root->left);
       int rh = maxDepth(root->right);

       return 1+max(lh,rh); //recurrence relation

    }
};



################ Using Level Order Traversal Approach

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == NULL){
            return 0;
        }
        queue<TreeNode*> q;
        q.push(root);
        int countLevel=0;
        while(!q.empty()){
            int size = q.size();
            countLevel++;
            for(int i=0;i<size;i++){
                TreeNode* node = q.front();
                q.pop();

                if(node->left != NULL){
                    q.push(node->left);
                }
                if(node->right != NULL){
                    q.push(node->right);
                }
            }
        }
        return countLevel;
    }
};
