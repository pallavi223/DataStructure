Input:
S = "}{{}}{{{"
Output: 3
Explanation: One way to balance is:
"{{{}}{}}". There is no balanced sequence
that can be formed in lesser reversals.


############################ 1. approach (without using stack)

int countRev (string s)
{
    if(s.length() %2 != 0){
        return -1;
    }
    int open = 0, close = 0, rev=0;
    for(int i=0;i<s.length();i++){
        if(s[i] == '{'){
            open++;
        }
        else{
            if(open == 0)
            close++;
            else
            open--;
        }
      
    }
      rev = ceil(open/2.0)+ceil(close/2.0);
      return rev;
}

############################ Using Stack

int findMinimumCost(string str) {
  //if odd hai length return -1
    if(str.length()%2 == 1){
        return -1;
    }
    //step: remove valid part from expression
    stack<char> st;
    for(int i=0;i<str.length();i++){
        char ch = str[i];     
        if(ch == '{')
            st.push(ch);
        else{
            //if closing than have 2 cases: ya to close brace ka ek open brace miljyga valid part removal hojyga 
            if(!st.empty() && st.top() == '{'){
                st.pop();
            }
            else{
                st.push(ch);
            }
        }
    }
    //If Stack Contains invalid string
    //take count of a & b --> a for closed braces , b for open braces
    int aCount = 0, bCount = 0;
    
    while(!st.empty()){
        //if brace is open
        if(st.top() == '{')
            bCount++;
        else
            aCount++;
        st.pop();
    }
    int ans = (aCount+1)/2 + (bCount+1)/2;
    return ans;
    
}
