
n = 4, m = 4
M[][] = {{0 1 1 0},
         {1 1 1 1},
         {1 1 1 1},
         {1 1 0 0}}
Output: 8


   private:
      vector<int> nextSmallestElement(int *arr, int n){
          stack<int> st;
          st.push(-1);
          
          vector<int> ans(n);
          for(int i=n-1; i>=0; i--){
              int curr = arr[i];
              while(st.top() != -1 && arr[st.top()] >= curr){
                  st.pop();
              }
               ans[i] = st.top();
              st.push(i);
          }
          return ans;
      }
     
       vector<int> prevSmallestElement(int *arr, int n){
            stack<int> st;
            st.push(-1);
            
            vector<int> ans(n);
            for(int i=0;i<n;i++){
                int curr = arr[i];
                while(st.top() != -1 && arr[st.top()] >= curr){
                    st.pop();
                }
                 ans[i] = st.top();
                st.push(i);
            }
            return ans;
            
         }
    
       int largestRectangleArea(int *heights, int n){
           //previous smallest element index
           vector<int> next(n);
           next = nextSmallestElement(heights, n);
           
           //next smallest element index
           vector<int> prev(n);
           prev = prevSmallestElement(heights, n);
           
           //compute max area
           
           int area = INT_MIN;
           for(int i=0;i<n;i++){
              int len = heights[i];
              
              if(next[i] == -1){
                  next[i] = n;
              }
              
              int bredth = next[i]-prev[i]-1;
              
              int newArea = len*bredth;
              area = max(area, newArea);
           }
           return area;
       } 
       
       
       
  public:
    int maxArea(int M[MAX][MAX], int n, int m) {
        //step1: find max area for first row
        int area = largestRectangleArea(M[0], m);
        
        // find area for remaining rows
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                
                //row update: by adding previous row
                //if base 0 ni ha to
                if(M[i][j] != 0)
                    M[i][j] = M[i][j]+M[i-1][j];
                
                else
                    M[i][j] = 0;
                
            }
                //entire row is updated now
                int newArea = largestRectangleArea(M[i],m);
                area = max(area, newArea);
                
            
        }
        return area;
    }
};

######################################################

2. solution using histogram approach || C++


class Solution {
private:
vector nearestSmallerLeft(vector &arr){
int n = arr.size();
vector ans;
stack<pair<int, int>> s;

    for(int i=0;i<n;i++){
        if(s.size() == 0){
            ans.push_back(-1);
        }
        else if(s.size() > 0 && s.top().first < arr[i]){
            ans.push_back(s.top().second);
        }
        else {
            while(s.size() > 0 && s.top().first >= arr[i]){
                s.pop();
            }
            if(s.size() == 0){
                ans.push_back(-1);
            }
            else{
                ans.push_back(s.top().second);
            }
        }
        s.push({arr[i], i});
    }
    return ans;
}

vector<int> nearestSmallerRight(vector<int> &arr){
     vector<int> ans;
    stack<pair<int, int>> s;
    int n = arr.size();
    
    for(int i=n-1;i>=0;i--){
        if(s.size() == 0){
            ans.push_back(n);
        }
        else if(s.size() > 0 && s.top().first < arr[i]){
            ans.push_back(s.top().second);
        }
        else {
            while(s.size() > 0 && s.top().first >= arr[i]){
                s.pop();
            }
            if(s.size() == 0){
                ans.push_back(n);
            }
            else{
                ans.push_back(s.top().second);
            }
        }
        s.push({arr[i], i});
    }
    reverse(ans.begin(), ans.end());
    return ans;
}
public:
int largestRectangleArea(vector& heights) {
int n = heights.size();

    vector<int> left(n);
    left = nearestSmallerLeft(heights);
    
    vector<int> right(n);
    right = nearestSmallerRight(heights);
    
   vector<int>v;
   for(int i=0;i<n;i++){
       v.push_back((right[i]-left[i]-1)*heights[i]);   //(n-p-1)*length
   }
  int area=*max_element(v.begin(), v.end());
      
   return area;
}
public:
int maximalRectangle(vector<vector>& matrix) {

      if(matrix.empty())
        return 0;

 int m=matrix.size();  //Number of Rows
int n=matrix[0].size();  //size of every row
    vector<int> v(n,0);  //Stores 1-d histogram of level row in matrix
 
    int ans = 0;
    
    //add next rows in vector
    for(int i=0;i<m;i++){  //row
        for(int j=0;j<n;j++){   //col
            //copy if 0 to 0 dalo else add krdo if 1 ha than add first array ele to another
            if(matrix[i][j] == '0')
                v[j] = 0;
            
            else
              v[j] += 1;
        }          
        
        //call maximumAreaHistogram function for other vectors to find maximum
         int area = largestRectangleArea(v);
         ans = max(ans, area);
    }
    
    return ans;
}
};
