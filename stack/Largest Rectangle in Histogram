



class Solution {

    private:
    vector<int> nextSmallerElement(vector<int> arr, int n){
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);
        for(int i=n-1;i>=0;i--){
             int curr = arr[i];

             while(s.top() != -1 && arr[s.top()] >= curr){
                 s.pop();
             }
             ans[i] = s.top();
             s.push(i);

        }
        return ans;
    }

    vector<int> prevSmallerElement(vector<int> arr, int n){
        stack<int> s;
        s.push(-1);
        vector<int>ans(n);
        for(int i=0;i<n;i++){
            int curr = arr[i];
            while(s.top() != -1 && arr[s.top()] >= curr){
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }

public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();

        //step1: find next smallest index of array
        vector<int> next(n);
        next = nextSmallerElement(heights,n);

        //step2: find previous smallest index of an array
        vector<int> prev(n);
        prev = prevSmallerElement(heights, n);

        //step3: calculate maximum area
        int area = INT_MIN;
        for(int i=0;i<n;i++){
            int length = heights[i];

            if(next[i] == -1){
                next[i] = n;
            }
            //next ko update krne ke baad breadth ko update krna ha 
            int breadth = next[i] - prev[i] - 1;  //n-p-1(next-prev-1)
        
            int newArea = length*breadth;
            area = max(area, newArea);  //maximum area

        }
      return area;

    }
};
