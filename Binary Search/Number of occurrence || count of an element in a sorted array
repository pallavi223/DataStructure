


class Solution{
    //first occu index
    int firstOcc(int arr[], int n, int x){
        
        int si=0;
        int ei=n-1;
        int mid = si+(ei-si)/2;
        int ans = -1;
        while(si<=ei){
            if(arr[mid] == x){
               ans = mid;
               ei = mid-1;
            }
            else if(arr[mid] > x){
                ei = mid-1;
            }
            else{
                si = mid+1;
            }
            mid = si+(ei-si)/2;
        }
        return ans;
    }
    
    //last occ index
    
    int lastOcc(int arr[], int n, int x){
        int si=0;
        int ei=n-1;
        int mid = si+(ei-si)/2;
        int ans = -1;
        while(si<=ei){
            if(arr[mid] == x){
               ans = mid;
               si = mid+1;
            }
            else if(arr[mid] > x){
                ei = mid-1;
            }
            else{
                si = mid+1;
            }
            mid = si+(ei-si)/2;
        }
        return ans;
    }
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) {
	    int count=0;
	   
	    int first = firstOcc(arr, n , x);
	    int last = lastOcc(arr, n , x);
	    
	      if(first == -1){
	      return 0;
	    }
	    count = last - first +1;  //lastOccIndex - firstOccIndex+1
	    
	    return count;
	}
};
